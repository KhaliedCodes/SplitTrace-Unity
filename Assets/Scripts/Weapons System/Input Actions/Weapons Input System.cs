//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Weapons System/Input Actions/Weapons Input System.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @WeaponsInputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @WeaponsInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Weapons Input System"",
    ""maps"": [
        {
            ""name"": ""WeaponsActions"",
            ""id"": ""ca8b5085-31dd-403a-a689-7f68145bd371"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""b2549f58-5faf-41f4-8b03-ee958e22bd91"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon"",
                    ""type"": ""Value"",
                    ""id"": ""b3193f38-6510-4aa9-9be2-294434d7fe80"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""8aa236cb-4f68-42d2-a21d-32314e1b16c7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""d77821d7-fa64-412f-b37d-0feb919a0213"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""50582578-a7a0-4190-8e6f-1b3da0b4e135"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Unequip"",
                    ""type"": ""Button"",
                    ""id"": ""d209bb43-4159-47bc-840d-1c922882be40"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""816e0a44-bf27-41c0-ac98-25ca4dc867cf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c333df7a-3c93-4bd7-8339-85162b6b4f25"",
                    ""path"": ""<VirtualMouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8f285b6-f433-4c18-99cf-93a97333759a"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b2225b6-0158-4840-923f-11f12752fb71"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb15cd38-f795-4bfd-af90-f06b7842eb1e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24d7999e-1a6b-430a-b1f8-579bdd08e2b4"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8974977a-4690-49af-b355-dc04887035ca"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Unequip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // WeaponsActions
        m_WeaponsActions = asset.FindActionMap("WeaponsActions", throwIfNotFound: true);
        m_WeaponsActions_Shoot = m_WeaponsActions.FindAction("Shoot", throwIfNotFound: true);
        m_WeaponsActions_SwitchWeapon = m_WeaponsActions.FindAction("SwitchWeapon", throwIfNotFound: true);
        m_WeaponsActions_Pickup = m_WeaponsActions.FindAction("Pickup", throwIfNotFound: true);
        m_WeaponsActions_Drop = m_WeaponsActions.FindAction("Drop", throwIfNotFound: true);
        m_WeaponsActions_Reload = m_WeaponsActions.FindAction("Reload", throwIfNotFound: true);
        m_WeaponsActions_Unequip = m_WeaponsActions.FindAction("Unequip", throwIfNotFound: true);
    }

    ~@WeaponsInputSystem()
    {
        UnityEngine.Debug.Assert(!m_WeaponsActions.enabled, "This will cause a leak and performance issues, WeaponsInputSystem.WeaponsActions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // WeaponsActions
    private readonly InputActionMap m_WeaponsActions;
    private List<IWeaponsActionsActions> m_WeaponsActionsActionsCallbackInterfaces = new List<IWeaponsActionsActions>();
    private readonly InputAction m_WeaponsActions_Shoot;
    private readonly InputAction m_WeaponsActions_SwitchWeapon;
    private readonly InputAction m_WeaponsActions_Pickup;
    private readonly InputAction m_WeaponsActions_Drop;
    private readonly InputAction m_WeaponsActions_Reload;
    private readonly InputAction m_WeaponsActions_Unequip;
    public struct WeaponsActionsActions
    {
        private @WeaponsInputSystem m_Wrapper;
        public WeaponsActionsActions(@WeaponsInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_WeaponsActions_Shoot;
        public InputAction @SwitchWeapon => m_Wrapper.m_WeaponsActions_SwitchWeapon;
        public InputAction @Pickup => m_Wrapper.m_WeaponsActions_Pickup;
        public InputAction @Drop => m_Wrapper.m_WeaponsActions_Drop;
        public InputAction @Reload => m_Wrapper.m_WeaponsActions_Reload;
        public InputAction @Unequip => m_Wrapper.m_WeaponsActions_Unequip;
        public InputActionMap Get() { return m_Wrapper.m_WeaponsActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponsActionsActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponsActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponsActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponsActionsActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @SwitchWeapon.started += instance.OnSwitchWeapon;
            @SwitchWeapon.performed += instance.OnSwitchWeapon;
            @SwitchWeapon.canceled += instance.OnSwitchWeapon;
            @Pickup.started += instance.OnPickup;
            @Pickup.performed += instance.OnPickup;
            @Pickup.canceled += instance.OnPickup;
            @Drop.started += instance.OnDrop;
            @Drop.performed += instance.OnDrop;
            @Drop.canceled += instance.OnDrop;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @Unequip.started += instance.OnUnequip;
            @Unequip.performed += instance.OnUnequip;
            @Unequip.canceled += instance.OnUnequip;
        }

        private void UnregisterCallbacks(IWeaponsActionsActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @SwitchWeapon.started -= instance.OnSwitchWeapon;
            @SwitchWeapon.performed -= instance.OnSwitchWeapon;
            @SwitchWeapon.canceled -= instance.OnSwitchWeapon;
            @Pickup.started -= instance.OnPickup;
            @Pickup.performed -= instance.OnPickup;
            @Pickup.canceled -= instance.OnPickup;
            @Drop.started -= instance.OnDrop;
            @Drop.performed -= instance.OnDrop;
            @Drop.canceled -= instance.OnDrop;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @Unequip.started -= instance.OnUnequip;
            @Unequip.performed -= instance.OnUnequip;
            @Unequip.canceled -= instance.OnUnequip;
        }

        public void RemoveCallbacks(IWeaponsActionsActions instance)
        {
            if (m_Wrapper.m_WeaponsActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponsActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponsActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponsActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponsActionsActions @WeaponsActions => new WeaponsActionsActions(this);
    public interface IWeaponsActionsActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnSwitchWeapon(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnUnequip(InputAction.CallbackContext context);
    }
}
